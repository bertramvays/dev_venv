# -*- coding: utf-8 -*-
import mastermind_engine as m_eng

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT
#TODO не работает не коректный ввод.
#TODO расскрасить вывод termcolor

while True:
    NN = m_eng.riddle_number()
    print("Компьтер загадал число. Попробуйте его отгадать.", NN)
    moves_count = 0
    while True:
        user_num = input("Ваш вариант числа: ")
        moves_count += 1
        if not user_num.isdigit() and user_num.startswith('0'):
            print("Простите но вы ввели некоректное число. Повторите ввод(число не должно начинаться на 0)")
            continue
        else:
            result = m_eng.check_number(user_num)
            if result['bulls'] == 4:
                break
            else:
                print(f'Ваше число - {user_num}, результат - {result}')
    print(f'Поздравляем вы угадали! Загаданное число {NN}, вы совершили {moves_count} попыток.')
    bis_game_choice = input('Хотите еще партию? Если нет, введите "нет" или "no" ')
    if bis_game_choice.lower() == 'нет' or bis_game_choice.lower() == 'no':
        print('Спасибо за игру!')
        break


